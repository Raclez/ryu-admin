FROM node:20-slim AS builder

# --max-old-space-size
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV NODE_OPTIONS=--max-old-space-size=8192
ENV TZ=Asia/Shanghai

RUN corepack enable

WORKDIR /app

# copy package.json and pnpm-lock.yaml to workspace
COPY . /app

# ÂÆâË£Ö‰æùËµñÂπ∂ÂàõÂª∫Áº∫Â§±ÁöÑÂåÖ
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --no-frozen-lockfile

# ÂàõÂª∫Áº∫Â§±ÁöÑtsconfigÂåÖ
RUN mkdir -p packages/@vben/tsconfig
RUN echo '{\
  "name": "@vben/tsconfig",\
  "version": "1.0.0",\
  "main": "index.js",\
  "files": ["*.json"]\
}' > packages/@vben/tsconfig/package.json

# ÂàõÂª∫Âü∫Á°ÄÁöÑtsconfigÊñá‰ª∂
RUN echo '{\
  "$schema": "https://json.schemastore.org/tsconfig",\
  "display": "Default",\
  "compilerOptions": {\
    "target": "ESNext",\
    "module": "ESNext",\
    "moduleResolution": "Bundler",\
    "strict": true,\
    "esModuleInterop": true,\
    "skipLibCheck": true,\
    "forceConsistentCasingInFileNames": true\
  }\
}' > packages/@vben/tsconfig/base.json

RUN echo '{\
  "$schema": "https://json.schemastore.org/tsconfig",\
  "display": "Web Application",\
  "extends": "./base.json",\
  "compilerOptions": {\
    "lib": ["ESNext", "DOM", "DOM.Iterable"],\
    "types": ["vite/client"]\
  }\
}' > packages/@vben/tsconfig/web-app.json

RUN echo '{\
  "$schema": "https://json.schemastore.org/tsconfig",\
  "display": "Web",\
  "extends": "./base.json",\
  "compilerOptions": {\
    "lib": ["ESNext", "DOM", "DOM.Iterable"]\
  }\
}' > packages/@vben/tsconfig/web.json

RUN echo '{\
  "$schema": "https://json.schemastore.org/tsconfig",\
  "display": "Node",\
  "extends": "./base.json",\
  "compilerOptions": {\
    "module": "ESNext",\
    "moduleResolution": "Bundler"\
  }\
}' > packages/@vben/tsconfig/node.json

RUN echo '{\
  "$schema": "https://json.schemastore.org/tsconfig",\
  "display": "Library",\
  "extends": "./base.json",\
  "compilerOptions": {\
    "declaration": true,\
    "declarationMap": true\
  }\
}' > packages/@vben/tsconfig/library.json

# ÂàõÂª∫Áº∫Â§±ÁöÑvite-configÂåÖ
RUN mkdir -p packages/@vben/vite-config/src
RUN echo '{\
  "name": "@vben/vite-config",\
  "version": "1.0.0",\
  "type": "module",\
  "main": "src/index.js"\
}' > packages/@vben/vite-config/package.json

# ‰ΩøÁî®Â§öË°åÂÜôÂÖ•ÁöÑÊñπÂºèÈÅøÂÖçDockerfileËß£ÊûêÂá∫Èîô
RUN cat > packages/@vben/vite-config/src/index.js << 'EOF'
import { defineConfig as viteDefineConfig } from "vite";

function defineConfig(fn) {
  return async () => {
    const config = await fn();
    return viteDefineConfig(config.vite);
  };
}

export default defineConfig;
EOF

# ÂàõÂª∫Áº∫Â§±ÁöÑtypesÂåÖ
RUN mkdir -p packages/@vben/types
RUN echo '{\
  "name": "@vben/types",\
  "version": "1.0.0",\
  "types": "global.d.ts"\
}' > packages/@vben/types/package.json

RUN cat > packages/@vben/types/global.d.ts << 'EOF'
// ÂÖ®Â±ÄÁ±ªÂûãÂÆö‰πâ
declare global {
  interface Window {
    [key: string]: any;
  }
}
EOF

# Á°Æ‰øù@vben-core/shared/cacheÁõÆÂΩïÂ≠òÂú®Âπ∂ÂàõÂª∫ÂøÖË¶ÅÁöÑÊñá‰ª∂
RUN mkdir -p packages/@core/base/shared/src/cache

RUN cat > packages/@core/base/shared/src/cache/index.ts << 'EOF'
// ÁºìÂ≠òÂÆûÁé∞
import { createStorage } from "../utils/storage";

// ÈªòËÆ§ÁºìÂ≠òÊó∂Èó¥
export const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7; // 7Â§©

// ÂàõÂª∫localStorageÁºìÂ≠ò
export const createLocalStorage = (options = {}) => {
  return createStorage({
    storage: localStorage,
    ...options,
  });
};

// ÂàõÂª∫sessionStorageÁºìÂ≠ò
export const createSessionStorage = (options = {}) => {
  return createStorage({
    storage: sessionStorage,
    ...options,
  });
};

export const defaultCache = createLocalStorage();

// ÂØºÂá∫Â∏∏Áî®ÁöÑÂ≠òÂÇ®Êìç‰ΩúÊñπÊ≥ï
export class Cache {
  private cache: ReturnType<typeof createStorage>;

  constructor(storage = defaultCache) {
    this.cache = storage;
  }

  get<T = any>(key: string, def: T | null = null): T {
    return this.cache.get(key) || def;
  }

  set(key: string, value: any, expire = DEFAULT_CACHE_TIME) {
    this.cache.set(key, value, expire);
  }

  remove(key: string) {
    this.cache.remove(key);
  }

  clear() {
    this.cache.clear();
  }
}
EOF

# Á°Æ‰øùutilsÁõÆÂΩï‰∏ãÊúâstorage.tsÊñá‰ª∂
RUN mkdir -p packages/@core/base/shared/src/utils

RUN cat > packages/@core/base/shared/src/utils/storage.ts << 'EOF'
// Â≠òÂÇ®Â∑•ÂÖ∑ÂáΩÊï∞
export interface StorageOption {
  storage: Storage;
  prefix?: string;
}

export interface Storage {
  getItem(key: string): string | null;
  setItem(key: string, value: string): void;
  removeItem(key: string): void;
  clear(): void;
}

export interface CreateStorageParams extends StorageOption {
  timeout?: number;
}

export function createStorage({
  storage = localStorage,
  prefix = "",
  timeout = 0,
}: Partial<CreateStorageParams> = {}) {
  function getKey(key: string) {
    return `${prefix}${key}`.toUpperCase();
  }

  function set(key: string, value: any, expire = timeout) {
    const stringData = JSON.stringify({
      value,
      expire: expire !== 0 ? new Date().getTime() + expire * 1000 : 0,
    });
    storage.setItem(getKey(key), stringData);
  }

  function get(key: string) {
    const item = storage.getItem(getKey(key));
    if (!item) return null;

    try {
      const data = JSON.parse(item);
      const { value, expire } = data;
      // Êó†ËøáÊúüÊó∂Èó¥ÊàñËÄÖÊú™ËøáÊúüËøîÂõûÁºìÂ≠òÁöÑÂÄº
      if (expire === 0 || expire > new Date().getTime()) {
        return value;
      }
      // ËøáÊúüÂàôÂà†Èô§
      remove(key);
      return null;
    } catch (e) {
      return null;
    }
  }

  function remove(key: string) {
    storage.removeItem(getKey(key));
  }

  function clear() {
    storage.clear();
  }

  return {
    set,
    get,
    remove,
    clear,
  };
}
EOF

# ÈáçÊñ∞ÈìæÊé•‰æùËµñ
RUN pnpm install --no-frozen-lockfile

# ÊâßË°åÊûÑÂª∫
RUN cd apps/web-ele && pnpm run build

RUN echo "Builder Success üéâ"

FROM nginx:stable-alpine AS production

RUN echo "types { application/javascript js mjs; }" > /etc/nginx/conf.d/mjs.conf
COPY --from=builder /app/apps/web-ele/dist /usr/share/nginx/html

COPY --from=builder /app/scripts/deploy/nginx.conf /etc/nginx/nginx.conf

HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD wget -q -O /dev/null http://localhost:8080/health || exit 1

EXPOSE 8080

# start nginx
CMD ["nginx", "-g", "daemon off;"]
